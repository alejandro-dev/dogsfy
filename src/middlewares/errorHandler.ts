import { Request, Response, NextFunction } from 'express';

/**
 * Middleware function to handle errors in the application.
 * 
 * This function catches errors that occur during the request lifecycle and formats the response in a consistent manner, sending an appropriate HTTP status code and error message. It also includes additional details about the error in development mode.
 * 
 * The error response includes:
 * - `status`: A string that indicates the status of the error ("fail" for client errors, "error" for server errors).
 * - `statusCode`: The HTTP status code of the error.
 * - `message`: A message describing the error.
 * - `errors`: Additional error details, if any.
 * - `details`: The stack trace of the error (only in development mode).
 * 
 * @function
 * @param {any} err - The error object, typically generated by previous middleware or route handlers.
 * @param {Request} _req - The request object that triggered the error.
 * @param {Response} res - The response object used to send the formatted error response.
 * @param {NextFunction} _next - The function to pass control to the next middleware (not used in this function but is required by the function signature).
 * @returns {void} This function doesn't return anything but sends a JSON response with error details.
 */
const errorHandler = (err: any, _req: Request, res: Response, _next: NextFunction): void => {
    // If the error does not have a code, we assume it is a 500 error.
    const statusCode = err.status || 500;
    const message = err.message || 'Server error';
    const errors = err.errors || undefined;

    res.status(statusCode).json({
        error: {
            status: statusCode < 500 ? 'fail' : 'error',
            statusCode,
            message: message,
            ...(errors && {errors}),
            ...(process.env.NODE_ENV === 'development' && { details: err.stack }),
        },
    });
};

export default errorHandler;
