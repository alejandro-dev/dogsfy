import { NextFunction, Request, Response } from "express"
import { body, validationResult, Meta } from "express-validator";
import createError from 'http-errors';
import authService from "../services/authService";

/**
 * Middleware that validates the user login data.
 * 
 * It validates the following fields:
 * - `email`: must be a valid email address.
 * - `password`: must be at least 6 characters long and not empty.
 *
 * If any of the validations fail, the response will include an error with the corresponding message.
 * 
 * @function
 * @returns {Array} An array of middlewares to be used in a route.
 */
const validateLogin = [
    /**
     * Validates the `email` field of the login.
     * @memberof validateRegisterUser
     * @param {string} email - The email address.
     */
    body('email')
        .escape().trim()
        .isEmail().withMessage('The email is incorrect'),
        
    /**
     * Validates the `password` field of the login.
     * @memberof validateRegisterUser
     * @param {string} password - The password.
     */
    body('password')
        .trim().escape()
        .isLength({ min: 6 }).withMessage('The password must be at least 6 characters long')
        .notEmpty().withMessage('The password field cannot be empty'),
    /**
     * Validates the errors generated by the validations and handles the response.
     * If there are errors, an error message with the details is returned.
     * @memberof validateRegisterUser
     * @param {Request} req - The request object.
     * @param {Response} _res - The response object.
     * @param {NextFunction} next - The function to pass to the next middleware.
     * @returns {void}
     */
    (req: Request, _res: Response, next: NextFunction): void => {
        const errors = validationResult(req);
        if(!errors.isEmpty()){
            // Map errors to return only msg, value and path
            const formattedErrors = errors.array().map((err: any) => ({
                message: err.msg,
                field: err.path,
                value: err.value
            }));

            return next(createError(400, {message: 'Fill in all fields with correct values', errors: formattedErrors}));
        }
        return next();
    }
];

/**
 * Handles the user registration process.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} req - The request object containing user data in `req.body`.
 * @param {Response} res - The response object used to send the login result.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the user is logged in and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const login = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We collect the params
        const { email, password } = req.body;

        // We call the login service
        const result = await authService.login(email, password);

        // Return the response
        res.json(result);

    } catch (error) {
        // We return the error to the next middleware
        return next(error);
    }
}

export default {
    validateLogin,
    login
}