import { NextFunction, Request, Response } from 'express';
import { body, validationResult, Meta } from "express-validator";
import createError from 'http-errors';
import userService from '../services/userService';
import { User } from '../types/user';

/**
 * Middleware that validates the user registration data.
 * 
 * It validates the following fields:
 * - `username`: must be alphanumeric and not empty.
 * - `email`: must be a valid email address.
 * - `password`: must be at least 6 characters long and not empty.
 * - `confirm_password`: must match the `password` field.
 * - `lat`: must be a number and not empty.
 * - `lng`: must be a number and not empty.
 * - `language`: must be the browser's language and not empty.
 *
 * If any of the validations fail, the response will include an error with the corresponding message.
 * 
 * @function
 * @returns {Array} An array of middlewares to be used in a route.
 */
const validateAddUser = [
    /**
     * Validates the `username` field of the registration.
     * @memberof validateAddUser
     * @param {string} username - The username.
     */
    body('username')
        .escape().trim()
        .notEmpty().withMessage('The username is required')
        .isAlphanumeric().withMessage('The username can only contain alphanumeric characters'),

    /**
     * Validates the `email` field of the registration.
     * @memberof validateAddUser
     * @param {string} email - The email address.
     */
    body('email')
        .escape().trim()
        .isEmail().withMessage('The email is incorrect'),

    /**
     * Validates the `password` field of the registration.
     * @memberof validateAddUser
     * @param {string} password - The password.
     */
    body('password')
        .trim().escape()
        .isLength({ min: 6 }).withMessage('The password must be at least 6 characters long')
        .notEmpty().withMessage('The password field cannot be empty'),

    /**
     * Validates the `confirm_password` field of the registration.
     * @memberof validateAddUser
     * @param {string} confirm_password - The password confirmation.
     */
    body('confirm_password')
        .trim().escape()
        .notEmpty().withMessage('The confirm_password field cannot be empty')
        .custom((value: string, { req }: Meta) => {
            return value === req.body.password; 
        }).withMessage('The confirm_password field is different'),

    /**
     * Validates the `lat` (latitude) field of the registration.
     * @memberof validateAddUser
     * @param {string} lat - The latitude.
     */
    body('lat')
        .trim().escape()
        .notEmpty().withMessage('Latitude cannot be empty')
        .isNumeric().withMessage('Latitude must be a number'),

    /**
     * Validates the `lng` (longitude) field of the registration.
     * @memberof validateAddUser
     * @param {string} lng - The longitude.
     */
    body('lng')
        .trim().escape()
        .notEmpty().withMessage('Longitude cannot be empty')
        .isNumeric().withMessage('Longitude must be a number'),

    /**
     * Validates the `language` field of the registration.
     * @memberof validateAddUser
     * @param {string} language - The browser's language.
     */
    body('language')
        .trim().escape()
        .notEmpty().withMessage('The browser language cannot be empty'),

    /**
     * Validates the errors generated by the validations and handles the response.
     * If there are errors, an error message with the details is returned.
     * @memberof validateAddUser
     * @param {Request} req - The request object.
     * @param {Response} _res - The response object.
     * @param {NextFunction} next - The function to pass to the next middleware.
     * @returns {void}
     */
    (req: Request, _res: Response, next: NextFunction): void => {
        const errors = validationResult(req);
        if(!errors.isEmpty()){
            // Map errors to return only msg, value and path
            const formattedErrors = errors.array().map((err: any) => ({
                message: err.msg,
                field: err.path,
                value: err.value
            }));

            return next(createError(400, {message: 'Please fill in all fields with correct values', errors: formattedErrors}));
        }
        return next();
    }
];

/**
 * Handles the user registration process.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} req - The request object containing user data in `req.body`.
 * @param {Response} res - The response object used to send the user registration result.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the user is registered and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const addUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We collect the params
        const { username, email, password, lat, lng, language }: User = req.body;
        
        // We perform the insertion
        const response = await userService.addUser({username, email, password, lat, lng, language});

        // We return the response
        res.json(response);

    } catch (error) {
        // We return the error to the next middleware
        return next(error)
    }
}

/**
 * Handles to get info of a user.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} req - The request object containing the user `id` in `req.params`
 * @param {Response} res - The response object used to send the user info result.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the info user is consulted and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const getUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We collect the user id
        const { id } = req.params;

         // We call the user service
        const response = await userService.getUser(id);

        // Return the response
        res.json(response);

    } catch (error) {
        // We return the error to the next middleware
        return next(error)
    }
};

/**
 * Middleware that validates the user update data.
 * 
 * This middleware performs the following validations:
 * - `username`: Optional, must be alphanumeric and not empty if provided.
 * - `password`: Optional, must be at least 6 characters long and not empty if provided. It must match the `confirm_password` field if both are present.
 * - `confirm_password`: Optional, must not be empty and must match the `password` field if both are provided.
 * - `lat`: Optional, must be a number and not empty if provided.
 * - `lng`: Optional, must be a number and not empty if provided.
 * - `language`: Optional, must not be empty if provided.
 *
 * If any of the validations fail, the response will include an error with the corresponding message.
 * 
 * @function
 * @returns {Array} An array of middlewares to be used in a route.
 */
const validateUpdateUser = [
    /**
     * Validates the `username` field for updating the user.
     * @memberof validateUpdateUser
     * @param {string} username - The username.
     */
    body('username')
        .optional()
        .escape().trim()
        .isAlphanumeric().withMessage('The username can only contain alphanumeric characters'),

    /**
     * Validates the `password` field for updating the user.
     * @memberof validateUpdateUser
     * @param {string} password - The password.
     */
    body('password')
        .optional()
        .trim().escape()
        .isLength({ min: 6 }).withMessage('The password must be at least 6 characters long')
        .custom((value: string, { req }: Meta) => {
            // Checks if the confirm_password field exists
            if(!req.body.confirm_password) throw new Error('You must add the confirm_password field');
 
            // Compare with the password in req.body
            return value === req.body.password; 
        }),

    /**
     * Validates the `confirm_password` field for updating the user.
     * @memberof validateUpdateUser
     * @param {string} confirm_password - The password confirmation.
     */
    body('confirm_password')
        .optional()
        .trim().escape()
        .isLength({ min: 6 }).withMessage('The confirm_password must be at least 6 characters long')
        .custom((value: string, { req }: Meta) => {
            // Checks if the password field exists
            if(!req.body.password) throw new Error('You must add the password field');

            // Compare with the password in req.body
            return value === req.body.password; 
        })
        .withMessage('The confirm_password field is different'),

    /**
     * Validates the `lat` (latitude) field for updating the user.
     * @memberof validateUpdateUser
     * @param {string} lat - The latitude.
     */
    body('lat')
        .optional()
        .trim().escape()
        .isNumeric().withMessage('Latitude must be a number'),

    /**
     * Validates the `lng` (longitude) field for updating the user.
     * @memberof validateUpdateUser
     * @param {string} lng - The longitude.
     */
    body('lng')
        .optional()
        .trim().escape()
        .notEmpty().withMessage('Longitude cannot be empty')
        .isNumeric().withMessage('Longitude must be a number'),

    /**
     * Validates the `language` field for updating the user.
     * @memberof validateUpdateUser
     * @param {string} language - The browser's language.
     */
    body('language')
        .optional()
        .trim().escape(),

    /**
     * Validates the errors generated by the field validations and handles the response.
     * If there are errors, an error message with the details is returned.
     * @memberof validateUpdateUser
     * @param {Request} req - The request object.
     * @param {Response} _res - The response object. Unused in this function.
     * @param {NextFunction} next - The function to pass to the next middleware.
     * @returns {void}
     */
    (req: Request, _res: Response, next: NextFunction): void => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            // Format errors to return only message, value, and path
            const formattedErrors = errors.array().map((err: any) => ({
                message: err.msg,
                field: err.path,
                value: err.value
            }));

            return next(createError(400, { message: 'Please fill in all fields with correct values', errors: formattedErrors }));
        }
        return next();
    }
];

/**
 * Handles the user update process.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} req - The request object containing user data in `req.body`.
 * @param {Response} res - The response object used to send the user update result.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the user is updated and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const updateUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We collect the params
        const { username, password, lat, lng, language }: User = req.body;
        
        // We call the user service
        const response = await userService.updateUser(req.params.id, {username, password, lat, lng, language});

        // Return the response
        res.json(response);

    } catch (error) {
        // We return the error to the next middleware
        return next(error)
    }
};

/**
 * Handles the user delete process.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} req - The request object containing user `id` in `req.params`.
 * @param {Response} res - The response object used to send the user delete result.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the user is deleted and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const deleteUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We collect the user id
        const { id } = req.params;

        // Delete the user
        const response = await userService.deleteUser(id);

        // Return the response
        res.json(response);


    } catch (error) {
        // We return the error to the next middleware
        return next(error)
    }
};

// Consultar todos los usuarios
/**
 * Handles the get all users process.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} _req - The request object unused in this function
 * @param {Response} res - The response object used to send the list of users.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the list of user is retrieved and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const getUsers = async (_req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We call the user service
        const response = await userService.getUsers();

        // Return the response
        res.json(response);
        
    } catch (error) {
        // We return the error to the next middleware
        return next(error)
    }
}

export default {
    validateAddUser,
    addUser,
    getUsers,
    validateUpdateUser,
    updateUser,
    deleteUser,
    getUser
}