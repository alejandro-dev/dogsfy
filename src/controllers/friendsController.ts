import { NextFunction, Request, Response } from "express"
import { body, param, validationResult, Meta } from "express-validator";
import createError from 'http-errors';
import friendsService from "../services/friendsService";

/**
 * Middleware that validates add user friends data.
 * 
 * It validates the following fields:
 * - `friendId`: must not be empty or equal to that of the user making the call.
 *
 * If any of the validations fail, the response will include an error with the corresponding message.
 * 
 * @function
 * @returns {Array} An array of middlewares to be used in a route.
 */
const validateAddFriends = [
    /**
     * Validates the `friendId` field of the friend.
     * @memberof validateRegisterUser
     * @param {string} friendId - The friend id.
     */
    body('friendId')
        .escape().trim()
        .notEmpty().withMessage('The friendId field cannot be empty')
        .custom((value: string, { req }: Meta) => {
            // We compare that they are not equal
            if (req.user.id === value) throw createError(400, 'The ids must be different')
            return true;

        }).withMessage('The ids must be different'),
    
    /**
     * Validates the errors generated by the validations and handles the response.
     * If there are errors, an error message with the details is returned.
     * @memberof validateRegisterUser
     * @param {Request} req - The request object.
     * @param {Response} _res - The response object.
     * @param {NextFunction} next - The function to pass to the next middleware.
     * @returns {void}
     */
    (req: Request, _res: Response, next: NextFunction): void => {
        const errors = validationResult(req);
        if(!errors.isEmpty()){
            // Map errors to return only msg, value and path
            const formattedErrors = errors.array().map((err: any) => ({
                message: err.msg,
                field: err.path,
                value: err.value
            }));

            // We return the error to the next middleware
            return next(createError(400, {message: 'Fill in all fields with correct values', errors: formattedErrors}));
        }
        return next();
    }
];

/**
 * Handles the add friend process.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} req - The request object containing the `friendId` in `req.body` and the user id in `req.user`.
 * @param {Response} res - The response object used to send the user add friend result.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the user is added and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const addFriend = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We collect the params
        const { friendId } = req.body;

        // We collect the user id
        const { id } = req.user!;

        // We call the friends service
        const response = await friendsService.addFriend(id, friendId);

        // Return the response
        res.json(response);

    } catch (error) {
        // We return the error to the next middleware
        next(error);
    }
}

// Validar datos del formulario para eliminar un amigo
/**
 * Middleware that validates delete user friends data.
 * 
 * It validates the following fields:
 * - `friendId`: must not be empty or equal to that of the user making the call.
 *
 * If any of the validations fail, the response will include an error with the corresponding message.
 * 
 * @function
 * @returns {Array} An array of middlewares to be used in a route.
 */
const validateDeleteFriends = [
    /**
     * Validates the `friendId` field of the friend.
     * @memberof validateRegisterUser
     * @param {string} friendId - The friend id.
     */
    param('friendId')
        .escape().trim()
        .notEmpty().withMessage('The friendId field cannot be empty')
        .custom((value: string, { req }: Meta) => {
            // We compare that they are not equal
            if (req.user.id === value) throw createError(400, 'The ids must be different')
            return true;

        }).withMessage('The ids must be different'),

    /**
     * Validates the errors generated by the validations and handles the response.
     * If there are errors, an error message with the details is returned.
     * @memberof validateRegisterUser
     * @param {Request} req - The request object.
     * @param {Response} _res - The response object.
     * @param {NextFunction} next - The function to pass to the next middleware.
     * @returns {void}
     */
    (req: Request, _res: Response, next: NextFunction): void => {
        const errors = validationResult(req);
        if(!errors.isEmpty()){
            // Map errors to return only msg, value and path
            const formattedErrors = errors.array().map((err: any) => ({
                message: err.msg,
                field: err.path,
                value: err.value
            }));

            // We return the error to the next middleware
            return next(createError(400, {message: 'Fill in all fields with correct values', errors: formattedErrors}));
        }
        return next();
    }
];

/**
 * Handles the delete friend process.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} req - The request object containing the `friendId` in `req.body`, and the user id in `req.user`.
 * @param {Response} res - The response object used to send the user delete friend result.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the user is deleted and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const deleteFriend = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We collect the params
        const { friendId } = req.params;

        // We collect the user id
        const { id } = req.user!;

        // We call the friends service
        const response = await friendsService.deleteFriend(id, friendId);

        // Return the response        
        res.json(response);

    } catch (error) {
        // We return the error to the next middleware
        next(error);
    }
}

/**
 * Handles to get all friends of a user.
 * 
 * This function performs the following actions:
 * 
 * If an error occurs, it passes the error to the next middleware.
 * 
 * @async
 * @function
 * @param {Request} req - The request object containing the `limit` and `page` in `req.query`, and the user id in `req.user`.
 * @param {Response} res - The response object used to send the user delete friend result.
 * @param {NextFunction} next - The function to pass the error to the next middleware if an error occurs.
 * @returns {Promise<void>} Resolves when the friends are consulted and the response is sent.
 * @throws {Error} If there is any error during the process, it will be passed to the next middleware.
 */
const getFriends = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        // We collect user id
        const { id } = req.user!;

        // We collect the query. Can contain the following fields:
        // - `limit`: the number of friends to return per page.
        // - `page`: the page number to return.
        const query = req.query;


        // We call the friends service
        const response = await friendsService.getFriends(id, query);

        // Return the response
        res.json(response);

    } catch (error) {
        // We return the error to the next middleware
        next(error);
    }
}

export default {
    validateAddFriends,
    addFriend,
    validateDeleteFriends,
    deleteFriend,
    getFriends
}